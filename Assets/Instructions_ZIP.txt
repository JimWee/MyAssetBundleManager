

Thank you for purchasing this shared library for Android, iOS, WindowsPhone8.1,Windows 10 Universal, Windows, OSX and Linux.


The scope of this library is to compress/decompress zip archives and buffers on Android, iOS, WindowsPhone8.1, Windows10 Universal, Windows, OSX and Linux.

The ios and OSX libraries are compiled as universal. That means that they will support 32 and 64 bit builds.
The Windows and Linux libraries are compiled for x86 and x86_64 build modes.
The Android lib is compiled for armeabi, armeabi-v7a, x86 and x86_64.
The Windows Phone 8.1 lib is compiled for ARM and x86.
THE WSA lib is compiled for ARM, x86 and x86_64.

WSA SDK10 is supported with NetCore for Unity version 5.2 and higher.

WP81 and WSA with SDK81 can be compiled with mscorlib. If you want NetCore support there you have to provide your own
NetCore IO compatible functions.

(If the demo on a windows10 phone does not show text, create a guiskin and attach a font to it. Then use this guiskin in your gui.)

The plugin does not support encryption.

(ios: if you want to compile for watchOS,tvOS or simulator, extract in the Plugins/iOS folder and replace the desired plugin.)


FEATURES:
---------

Fast zip compression and decompression with a clean and simple interface. Very easy to use.

The plugin is about 7x times faster in compression speed and 3x times faster in decompression speed compared to SharpZipLib.


- compress/decompress buffers to/from zlib streams.

- recursive directory compression/decompression.

- compress/decompress single files.

- append files to existing zip archives.

- compress a buffer and write it or append it to a zip archive.

- get file and size info of all the files or a specific file from a zip archive.

- extract a single file out of a zip archive.

- decompress a file of a zip archive to a byte buffer.

- get progress of extraction when the zip archive has multiple files.

- encryption is not supported.

- Linux, iOS, Android, MacOSX can treat  buffers as files. That means if you have a file in www.bytes  you can perform operations directly on the buffer.
  For Android this is very useful since you can decompress from Streaming Assets without copying to  Persistent data path.


!!! If you want to use only the zip plugin, please delete all the other plugins  or use the single packages in from the _plugin_packages folder!!!!!!


!!! The plugin will not decompress __MACOSX folders, files starting with ._ and files with 0 bytes size !!!

-------------------------------------------------------------------------------------------------------------------------------------



INSTRUCTIONS:
-------------

If you want to run a small example, compile and run the testScene.
It will download a small zip file and it will perform all the functions the lib provides.

See the lzip.cs file for more comments and error codes.

In your project include in the Plugins folder the plugins you want to use and the lzip.cs file and call the appropriate functions
as described below and shown in the demo scene.


THE FUNCTIONS:
--------------

-------------------------------------------------------------------------------------------------------------------------------------

int getTotalFiles(string zipArchive, byte[] FileBuffer = null);

A function that returns the total number of files in a zip archive.

zipArchive		: the zip to be checked
FileBuffer		: A buffer that holds a zip file. When assigned the function will read from this buffer and will ignore the filePath. (Linux, iOS, Android, MacOSX)
ERROR CODES
                  : -1 = failed to access zip archive
                  :  any number>0 = the number of files in the zip archive

-------------------------------------------------------------------------------------------------------------------------------------

long getFileInfo(string zipArchive, string path, byte[] FileBuffer = null);

This function fills the Lists with the filenames and file sizes that are in the zip file
Returns		: the total size of uncompressed bytes of the files in the zip archive 

zipArchive		: the full path to the archive, including the archives name. (/myPath/myArchive.zip)
path            : the path where a temporary file will be created (recommended to use the Application.persistentDataPath);
FileBuffer		: A buffer that holds a zip file. When assigned the function will read from this buffer and will ignore the filePath. (Linux, iOS, Android, MacOSX)

ERROR CODES     : -1 = Input file not found
				: -2 = Path to write the temporary log does not exist (for mobiles the Application.persistentDataPath is recommended)
				: -3 = Error of info data of the zip file
				: -4 = Log file not found

-------------------------------------------------------------------------------------------------------------------------------------

int getEntrySize(string zipArchive, string entry, byte[] FileBuffer = null)

A function that returns the uncompressed size of a file in a zip archive.

zipArchive		: the zip archive to get the info from.
entry			: the entry for which we want to know it uncompressed size.
FileBuffer		: A buffer that holds a zip file. When assigned the function will read from this buffer and will ignore the filePath. (Linux, iOS, Android, MacOSX)

-------------------------------------------------------------------------------------------------------------------------------------

bool compressBuffer(byte[] source, ref byte[] outBuffer, int levelOfCompression);

A function that compresses a byte buffer to a zlib stream compressed buffer. Provide a reference buffer to write to. This buffer will be resized.

source                	: the input buffer
outBuffer             	: the referenced output buffer
levelOfCompression    	: (0-10) recommended 9 for maximum (10 is highest but slower and not zlib compatible)

ERROR CODES   		: true  = success
              		: false = failed

-------------------------------------------------------------------------------------------------------------------------------------

byte[] compressBuffer(byte[] source,  int levelOfCompression);

A function that compresses a byte buffer to a zlib stream compressed buffer. Returns a new buffer with the compressed data.

source                : the input buffer
levelOfCompression    : (0-10) recommended 9 for maximum (10 is highest but slower and not zlib compatible)

ERROR CODES           : a valid byte buffer = success
                      : null                = failed

-------------------------------------------------------------------------------------------------------------------------------------

int compressBufferFixed(byte[] source, ref byte[] outBuffer, int levelOfCompression, bool safe = true);

Same as the compressBuffer function, only this function will put the result in a fixed size buffer to avoid memory allocations.
The compressed size is returned so you can manipulate it at will.

safe: if set to true the function will abort if the compressed resut is larger the the fixed size output buffer.
Otherwise compressed data will be written only until the end of the fixed output buffer.

		
-------------------------------------------------------------------------------------------------------------------------------------

bool decompressBuffer(byte[] source, ref byte[] outBuffer);

A function that decompresses a zlib compressed buffer to a referenced outBuffer. The outbuffer will be resized.

source            : a zlib compressed buffer.
outBuffer         : a referenced out buffer provided to extract the data. This buffer will be resized to fit the uncompressed data.

ERROR CODES       : true  = success
                  : false = failed
	
-------------------------------------------------------------------------------------------------------------------------------------

byte[] decompressBuffer(byte[] source);

A function that decompresses a zlib compressed buffer and creates a new buffer.  Returns a new buffer with the uncompressed data.

source                : a zlib compressed buffer.

ERROR CODES           : a valid byte buffer = success
                      : null                = failed

-------------------------------------------------------------------------------------------------------------------------------------

int decompressBufferFixed(byte[] source, ref byte[] outBuffer, bool safe = true);

Ssame as the decompressBuffer function. Only this one outputs to a buffer of fixed which size isn't resized to avoid memory allocations.

The fixed buffer should have a size that will be able to hold the incoming decompressed data.
Returns the uncompressed size.

safe: if set to true the function will abort if the decompressed resut is larger the the fixed size output buffer.
Otherwise decompressed data will be written only until the end of the fixed output buffer.

-------------------------------------------------------------------------------------------------------------------------------------

bool entry2Buffer(string zipArchive, string entry, ref byte[] buffer, byte[] FileBuffer = null);

A function that will decompress a file in a zip archive directly in a provided byte buffer.

zipArchive        : the full path to the zip archive from which a specific file will be extracted to a byte buffer.
entry             : the file we want to extract to a buffer. (If the file resides in a directory, the directory should be included.
buffer            : a referenced byte buffer that will be resized and will be filled with the extraction data.
FileBuffer		: A buffer that holds a zip file. When assigned the function will read from this buffer and will ignore the filePath. (Linux, iOS, Android, MacOSX)

ERROR CODES       : true  = success
                  : false = failed

-------------------------------------------------------------------------------------------------------------------------------------

byte[] entry2Buffer(string zipArchive, string entry, byte[] FileBuffer = null);

A function that will decompress a file in a zip archive in a new created and returned byte buffer.

zipArchive		: the full path to the zip archive from which a specific file will be extracted to a byte buffer.
entry			: the file we want to extract to a buffer. (If the file resides in a directory, the directory should be included.
FileBuffer		: A buffer that holds a zip file. When assigned the function will read from this buffer and will ignore the filePath. (Linux, iOS, Android, MacOSX)

ERROR CODES       : non-null  = success
                  : null      = failed

-------------------------------------------------------------------------------------------------------------------------------------

bool buffer2File(int levelOfCompression, string zipArchive, string arc_filename, byte[] buffer, bool append=false);

A function that compresses a byte buffer and writes it to a zip file. I you set the append flag to true,
the output will get appended to an existing zip archive.

levelOfCompression    : (0-10) recommended 9 for maximum (10 is highest but slower and not zlib compatible)
zipArchive            : the full path to the zip archive to be created or append to.
arc_filename          : the name of the file that will be written to the archive.
buffer                : the buffer that will be compressed and will be put in the zip archive.
append                : set to true if you want the output to be appended to an existing zip archive.

ERROR CODES           : true  = success
                      : false = failed

-------------------------------------------------------------------------------------------------------------------------------------

int extract_entry(string zipArchive, string arc_filename, string outpath, byte[] FileBuffer = null);

A function that will extract only the specified file that resides in a zip archive.

zipArchive			: the full path to the zip archive from which we want to extract the specific file.
arc_filename		: the specific file we want to extract. (If the file resides in a  directory, the directory path should be included. like dir1/dir2/myfile.bin)
outpath				: the full path to where the file should be extracted + the desired name for it.
FileBuffer			: A buffer that holds a zip file. When assigned the function will read from this buffer and will ignore the filePath. (Linux, iOS, Android, MacOSX)

ERROR CODES        : -1 = extraction failed
                   : -2 = could not initialize zip archive.
                   :  1 = success

-------------------------------------------------------------------------------------------------------------------------------------

int decompress_File(string zipArchive, string outPath, int[] progress, byte[] FileBuffer = null);

A function that decompresses a zip file. If the zip contains directories, they will be created.

zipArchive			: the full path to the zip archive that will be decompressed.
outPath				: the directory in which the zip contents will be extracted.
progress			: provide a single item integer array to write the current index of the file getting extracted.. To use it in realtime call
					: this function in a separate thread.
FileBuffer			: A buffer that holds a zip file. When assigned the function will read from this buffer and will ignore the filePath. (Linux, iOS, Android, MacOSX)

ERROR CODES
                   : -1 = could not initialize zip archive.
                   : -2 = failed reading content info
                   : -3 = failed extraction
                   :  1 = success

-------------------------------------------------------------------------------------------------------------------------------------

int compress_File(int levelOfCompression, string zipArchive, string inFilePath,bool append=false, string fileName="", string comment="");

A function that compresses a file to a zip file. If the flag append is set to true then it will get appended to an existing zip file.

levelOfCompression  : (0-10) recommended 9 for maximum (10 is highest but slower and not zlib compatible)
zipArchive          : the full path to the zip archive that will be created
inFilePath          : the full path to the file that should be compressed and added to the zip file.
append              : set to true if you want the input file to get appended to an existing zip file. (if the zip file does not exist it will be created.)
filename            : if you want the name of your file to be different then the one it has, set it here. If you add a folder structure to it,
                      like (dir1/dir2/myfile.bin) the directories will be created in the zip file.
comment             : add a comment for the file in the zip file header.

ERROR CODES
                    : -1 = could not find the input file
                    : -2 = could not allocate memory
                    : -3 = could not read the input file
                    : -4 = error creating zip file
                    :  1 = success

-------------------------------------------------------------------------------------------------------------------------------------

compressDir(string sourceDir, int levelOfCompression, string zipArchive, bool fr=false);

Compress a directory with all its files and subfolders to a zip file

sourceDir             : the directory you want to compress
levelOfCompression    : the level of compression (0-10).
zipArchive            : the full path+name to the zip file to be created .
includeRoot           : set to true if you want the root folder of the directory to be included in the zip archive. Otherwise leave it to false.

If you want to get the progress of compression, call the getAllFiles function to get the total number of files
in a directory and its subdirectories. The compressDir when called from a separate thread will update the public static int cProgress.
Divide this with the total no of files (as floats) and you have the % of the procedure.

-------------------------------------------------------------------------------------------------------------------------------------

int getAllFiles(string Dir);

Use this function to get the total files of a directory and its subdirectories.

-------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------


SUPPORT:
--------

For any questions, problems and suggestions please use this email address: elias_t@yahoo.com

Forum: http://forum.unity3d.com/threads/released-zip-native-multiplatfrom-plugin.339482

-------------------------------------------------------------------------------------------------------------------------------------
